group baksmali;

smaliFile(classDef) ::=
<<
.class <classDef.AccessFlags; separator=" "> <classDef.ClassType>
.super <classDef.SuperType>
<if(classDef.Interfaces)>

/**
 * Interfaces
 */
<classDef.Interfaces: implement(it); separator="\n">

<endif>
<if(classDef.StaticFields)>

/**
 * Static fields
 */
<classDef.StaticFields: field(it); separator="\n">

<endif>
<if(classDef.InstanceFields)>

/**
 * InstanceFields
 */
<classDef.InstanceFields: field(it); separator="\n">

<endif>
<if(classDef.DirectMethods)>

/**
 * Direct methods
 */
<classDef.DirectMethods: method(it); separator="\n\n">

<endif>
<if(classDef.VirtualMethods)>

/**
 * Virtual methods
 */
<classDef.VirtualMethods: method(it); separator="\n\n">

<endif>
>>



                 
implement(interface) ::=
<<
.implements <interface>
>>




field(fieldDef) ::=
<<
.field <fieldDef.AccessFlags; separator=" "> <fieldDef.FieldName>:<fieldDef.FieldType>
>>


method(methodDef) ::=
<<
.method <methodDef.AccessFlags; separator=" "> <methodDef.MethodName><methodDef.Prototype>
    <if(methodDef.hasCode)>
        .registers <methodDef.RegisterCount>

        <methodDef.MethodItems: MethodItem(it); separator="\n"> 
    <endif>
.end method
>>

MethodItem(MethodItem) ::=
<<
<MethodItem: (MethodItem.Template)(MethodItem)>
>>





Format10x(Instruction) ::=
<<
<Instruction.Opcode>
>>

Format11x(Instruction) ::=
<<
<Instruction.Opcode> v<Instruction.Register>
>>

Format21c(Instruction) ::=
<<
<Instruction.Opcode> v<Instruction.Register>, <Reference(Instruction.Reference)>
>>

Format35c(Instruction) ::=
<<
<Instruction.Opcode> {<Instruction.Registers: {v<it>}; separator=", ">}, <Reference(Instruction.Reference)>  
>>




Reference(ReferencedItem) ::=
<<
<(ReferencedItem.Template)(ReferencedItem)>
>>

StringReference(StringReference) ::=
<<
"<StringReference.EscapedValue>"
>>

FieldReference(FieldReference) ::=
<<
<FieldReference.ContainingClass>-><FieldReference.FieldName>:<FieldReference.FieldType>
>>

MethodReference(MethodReference) ::=
<<
<MethodReference.ContainingClass>-><MethodReference.MethodName><MethodReference.Prototype>
>>