/*
 * Copyright 2013, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

configurations {
    antlr3
}

ext.antlrSource = 'src/main/antlr3'
ext.antlrOutput = file("${buildDir}/generated-sources/antlr3")

sourceSets.main.java.srcDir antlrOutput

dependencies {
    compile project(':smali')
    compile depends.antlr_runtime
    compile depends.gson

    antlr3 depends.antlr
}

idea {
    module {
        jdkName = 'IDEA Plugin jdk'
        excludeDirs -= buildDir
        if (buildDir.exists()) {
            excludeDirs.addAll(buildDir.listFiles())
        }

        for (sourceDir in (sourceDirs + testSourceDirs)) {
            excludeDirs.remove(sourceDir);
            while ((sourceDir = sourceDir.getParentFile()) != null) {
                excludeDirs.remove(sourceDir);
            }
        }

        iml {
            withXml {
                it.node.@type = "PLUGIN_MODULE"
            }
        }
    }
}

// We can't actually compile the plugin with gradle, so we just disable everything
// except the tasks related to generating the IDEA module and ANTLR parser
tasks.all {
    if (!(name in ['idea', 'ideaModule', 'generateParserAntlrSource', 'clean'])) {
        enabled = false
    }
}

task generateParserAntlrSource(type: JavaExec, dependsOn: ":smali:generateGrammarSource") {
    def smaliOutputDir = file(relativePath(project.parent.childProjects.get('smali')
            .generateGrammarSource.outputDirectory))

    inputs.file new File(smaliOutputDir, "smaliParser.tokens")
    inputs.dir file(antlrSource)
    outputs.dir file(antlrOutput)

    file(antlrOutput).mkdirs()

    classpath = configurations.antlr3
    main = 'org.antlr.Tool'
    args '-fo', relativePath("${antlrOutput}/org/jf/smalidea")
    args '-lib', smaliOutputDir
    args new File(antlrSource, "smalideaParser.g")
}