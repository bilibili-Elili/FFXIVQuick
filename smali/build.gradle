configurations {
    antlr3
    jflex
    proguard
}

ext.antlrSource = 'src/main/antlr3'
ext.antlrOutput =  file(new File(buildDir, '/generated-sources/antlr3'))

ext.jflexSource = "src/main/jflex"
ext.jflexOutput = file(new File(buildDir, '/generated-sources/jflex'))

ext.testAntlrSource = 'src/test/antlr3'
ext.testAntlrOutput = file(new File(buildDir, '/generated-test-sources/antlr3'))

sourceSets.main.java.srcDir antlrOutput
sourceSets.main.java.srcDir jflexOutput

sourceSets.test.java.srcDir testAntlrOutput

dependencies {
    compile project(':util')
    compile project(':dexlib')
    compile 'org.antlr:antlr-runtime:3.2'
    compile 'commons-cli:commons-cli:1.2'

    testCompile 'junit:junit:4.6'

    antlr3 'org.antlr:antlr:3.2'
    jflex 'de.jflex:jflex:1.4.3'
    proguard 'net.sf.proguard:proguard-base:4.8'
}

task generateAntlrSource(type: JavaExec) {
    inputs.dir file(antlrSource)
    outputs.dir file(antlrOutput)

    mkdir(antlrOutput)
    def grammars = fileTree(antlrSource).include('**/*.g')

    classpath = files(configurations.antlr3.asPath)
    main = 'org.antlr.Tool'
    args '-fo', relativePath(new File(antlrOutput, 'org/jf/smali'))
    args grammars.files
}

task generateTestAntlrSource(type: JavaExec) {
    inputs.dir file(testAntlrSource)
    outputs.dir file(testAntlrOutput)

    mkdir(testAntlrOutput)
    def grammars = fileTree(testAntlrSource).include('**/*.g')

    classpath = files(configurations.antlr3.asPath)
    main = 'org.antlr.Tool'
    args '-fo', relativePath(new File(testAntlrOutput, 'org/jf/smali'))
    args grammars.files.join(' ')
}

task generateJflexSource(type: JavaExec) {
    inputs.dir file(jflexSource)
    outputs.dir file(jflexOutput)

    mkdir(jflexOutput)
    def grammars = fileTree(jflexSource).include('**/*.flex')

    classpath = files(configurations.jflex.asPath)
    main = 'JFlex.Main'
    args '-q'
    args '-d', relativePath(new File(jflexOutput, 'org/jf/smali'))
    args grammars.files.join(' ')
}


compileJava.dependsOn generateAntlrSource, generateJflexSource
compileTestJava.dependsOn generateTestAntlrSource

// We have to do this in taskGraph.whenReady, so that we use the correct
// version to resolve the project dependencies
gradle.taskGraph.whenReady {
    // build a jar containing all dependencies
    jar {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

        manifest {
            attributes("Main-Class": "org.jf.smali.main")
        }
    }

    processResources.inputs.properties('version': version)
    processResources.expand('version': version)

    proguard {
        def outFile = relativePath(buildDir) + '/libs/' + jar.baseName + '-' + jar.version + '-small' + '.' + jar.extension

        inputs.file jar.archivePath
        outputs.file outFile

        args '-injars ' + jar.archivePath + '(!**/TestStringTemplate*.class)'
        args '-outjars ' + outFile
    }
}

task proguard(type: JavaExec, dependsOn: jar) {
    classpath = files(configurations.proguard.asPath)
    main = 'proguard.ProGuard'
    args '-libraryjars ' + System.properties['java.home'] + '/lib/rt.jar'
    args '-dontobfuscate'
    args '-dontoptimize'
    args '-keep public class org.jf.smali.main { public static void main(java.lang.String[]); }'
    args '-keepclassmembers enum * { public static **[] values(); public static ** valueOf(java.lang.String); }'
    args '-dontwarn com.google.common.base.**'
    args '-dontnote com.google.common.base.**'
}

release.dependsOn(proguard)